add_compile_options("/utf-8")
include(GoogleTest)
set(PROCDIR ${PROJECT_SOURCE_DIR}/spam/ui/proc)

add_executable(test_Simd simd_gtest.cpp helper.cpp helper.h)
add_executable(test_Ensmallen ensmallen_gtest.cpp helper.cpp helper.h)
add_executable(test_SimdPerf simdperf_unittest.cpp helper.cpp helper.h)
add_executable(test_CVMatch cv_match_gtest.cpp helper.cpp helper.h)
add_executable(test_CVPerf cvperf_unittest.cpp helper.cpp helper.h ${PROCDIR}/gradient.cpp)
add_executable(test_Rgn rgn_gtest.cpp helper.cpp helper.h ${PROCDIR}/rgn.cpp ${PROCDIR}/basic.cpp)
add_executable(test_RgnPerf rgn_unittest.cpp helper.cpp helper.h ${PROCDIR}/rgn.cpp ${PROCDIR}/basic.cpp)
add_executable(test_VclPerf vcl_unittest.cpp helper.cpp helper.h ${PROJECT_SOURCE_DIR}/spam/vectorclass/instrset_detect.cpp)
add_executable(test_PixelTmplPerf pixeltmpl_unittest.cpp helper.cpp helper.h ${PROCDIR}/rgn.cpp ${PROCDIR}/basic.cpp ${PROCDIR}/gradient.cpp ${PROCDIR}/basetmpl.cpp ${PROCDIR}/pixeltmpl.cpp ${PROJECT_SOURCE_DIR}/spam/vectorclass/instrset_detect.cpp)
add_executable(test_ShapeTmplPerf shapetmpl_unittest.cpp helper.cpp helper.h ${PROCDIR}/rgn.cpp ${PROCDIR}/basic.cpp ${PROCDIR}/gradient.cpp ${PROCDIR}/basetmpl.cpp ${PROCDIR}/shapetmpl.cpp ${PROJECT_SOURCE_DIR}/spam/vectorclass/instrset_detect.cpp)

set(alltargets)
list(APPEND alltargets test_Simd)
list(APPEND alltargets test_Ensmallen)
list(APPEND alltargets test_SimdPerf)
list(APPEND alltargets test_CVMatch)
list(APPEND alltargets test_CVPerf)
list(APPEND alltargets test_Rgn)
list(APPEND alltargets test_RgnPerf)
list(APPEND alltargets test_VclPerf)
list(APPEND alltargets test_PixelTmplPerf)
list(APPEND alltargets test_ShapeTmplPerf)

set(gtesttargets)
list(APPEND gtesttargets test_Rgn)
list(APPEND gtesttargets test_Simd)
list(APPEND gtesttargets test_Ensmallen)
list(APPEND gtesttargets test_CVMatch)

foreach(t ${gtesttargets})
    target_link_libraries(${t} PRIVATE GTest::gtest GTest::gtest_main)
    gtest_discover_tests(${t} TEST_SUFFIX .noArgs TEST_LIST noArgsTests)
endforeach()

set(libs)
list(APPEND libs unofficial::cairo::cairo)
list(APPEND libs CAIROMM::CAIROMM)
list(APPEND libs TBB::tbb TBB::tbbmalloc)
list(APPEND libs hdf5::hdf5_cpp-shared)
list(APPEND libs hdf5::hdf5_hl_cpp-shared)
list(APPEND libs opencv_core)
list(APPEND libs opencv_imgcodecs opencv_ximgproc)
list(APPEND libs opencv_flann opencv_features2d opencv_mvlab)
list(APPEND libs Python3::Python)
list(APPEND libs Boost::python37)
list(APPEND libs Boost::filesystem)
list(APPEND libs Boost::thread)
list(APPEND libs Boost::locale)
list(APPEND libs ASMLIB::ASMLIB)
list(APPEND libs SIMD::Simd)
list(APPEND libs OpenBLAS::OpenBLAS)
list(APPEND libs LIB2GEOM::2geom sigc-3.0 GSL::gsl double-conversion::double-conversion)

foreach(t ${alltargets})
    target_include_directories(${t} PRIVATE ${CMAKE_BINARY_DIR}/include)
    target_include_directories(${t} PRIVATE ${PROJECT_SOURCE_DIR}/spam/ensmallen/include)
    target_include_directories(${t} PRIVATE ${PROJECT_SOURCE_DIR}/spam/armadillo/include)
    target_link_libraries(${t} PRIVATE ${libs})
    set_target_properties (${t} PROPERTIES FOLDER unittest)
    if(MSVC)
        target_compile_definitions(${t} PRIVATE __AVX2__ _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS _CRT_SECURE_NO_WARNINGS NOMINMAX VCL_NAMESPACE=vcl)
    endif()
    target_compile_definitions(${t} PRIVATE ARMA_DONT_USE_WRAPPER)
    target_compile_options(${t} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/MP>)
    target_compile_options(${t} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/arch:AVX2>)
endforeach()