add_compile_options("/utf-8")
include(GoogleTest)

add_executable(test_Simd simd_gtest.cpp helper.cpp helper.h)
add_executable(test_SimdPerf simdperf_unittest.cpp helper.cpp helper.h)
add_executable(test_CVMatch cv_match_gtest.cpp helper.cpp helper.h)
add_executable(test_CVPerf cvperf_unittest.cpp helper.cpp helper.h)
add_executable(test_Rgn rgn_gtest.cpp helper.cpp helper.h ${PROJECT_SOURCE_DIR}/spam/ui/proc/rgn.cpp ${PROJECT_SOURCE_DIR}/spam/ui/proc/basic.cpp)
add_executable(test_RgnPerf rgn_unittest.cpp helper.cpp helper.h ${PROJECT_SOURCE_DIR}/spam/ui/proc/rgn.cpp ${PROJECT_SOURCE_DIR}/spam/ui/proc/basic.cpp)
add_executable(test_VclPerf vcl_unittest.cpp helper.cpp helper.h ${PROJECT_SOURCE_DIR}/spam/vectorclass/instrset_detect.cpp)
add_executable(test_PixelTmplPerf pixeltmpl_unittest.cpp helper.cpp helper.h ${PROJECT_SOURCE_DIR}/spam/ui/proc/rgn.cpp ${PROJECT_SOURCE_DIR}/spam/ui/proc/basic.cpp ${PROJECT_SOURCE_DIR}/spam/ui/proc/gradient.cpp ${PROJECT_SOURCE_DIR}/spam/ui/proc/pixeltmpl.cpp ${PROJECT_SOURCE_DIR}/spam/vectorclass/instrset_detect.cpp)

set(alltargets)
list(APPEND alltargets test_Simd)
list(APPEND alltargets test_SimdPerf)
list(APPEND alltargets test_CVMatch)
list(APPEND alltargets test_CVPerf)
list(APPEND alltargets test_Rgn)
list(APPEND alltargets test_RgnPerf)
list(APPEND alltargets test_VclPerf)
list(APPEND alltargets test_PixelTmplPerf)

set(gtesttargets)
list(APPEND gtesttargets test_Rgn)
list(APPEND gtesttargets test_Simd)
list(APPEND gtesttargets test_CVMatch)

foreach(t ${gtesttargets})
    target_link_libraries(${t} PRIVATE GTest::GTest GTest::Main)
    gtest_discover_tests(${t} TEST_SUFFIX .noArgs TEST_LIST noArgsTests)
endforeach()

set(libs)
list(APPEND libs CAIRO::cairo)
list(APPEND libs CAIROMM::CAIROMM)
list(APPEND libs 2geom)
list(APPEND libs TBB::tbb TBB::tbbmalloc)
list(APPEND libs opencv_core)
list(APPEND libs opencv_imgcodecs)
list(APPEND libs Boost::filesystem)
list(APPEND libs Boost::thread)
list(APPEND libs Boost::locale)
list(APPEND libs Boost::system)
list(APPEND libs Freetype::Freetype)
list(APPEND libs Pixman::Pixman)
list(APPEND libs PNG::PNG)
list(APPEND libs JPEG::jpeg)
list(APPEND libs JPEG::turbo)
list(APPEND libs TIFF::TIFF)
list(APPEND libs FontConfig::FontConfig)
list(APPEND libs BZip2::BZip2)
list(APPEND libs EXPAT::EXPAT)
list(APPEND libs LIBLZMA::LIBLZMA)
list(APPEND libs Iconv::Iconv)
list(APPEND libs Iconv::charset)
list(APPEND libs "sigc-3.0")
list(APPEND libs GLIB::glib)
list(APPEND libs GLIB::gobject)
list(APPEND libs GSL::gsl)
list(APPEND libs GSL::gslcblas)
list(APPEND libs ASMLIB::ASMLIB)
list(APPEND libs SIMD::Alg)
list(APPEND libs SIMD::Simd)

foreach(t ${alltargets})
    target_include_directories(${t} PRIVATE ${CMAKE_BINARY_DIR}/include)
    target_link_libraries(${t} PRIVATE ${libs})
    set_target_properties (${t} PROPERTIES FOLDER unittest)
    if(MSVC)
        target_compile_definitions(${t} PRIVATE __AVX2__ _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS _CRT_SECURE_NO_WARNINGS _CRTDBG_MAP_ALLOC NOMINMAX VCL_NAMESPACE=vcl)
    endif()
    target_compile_options(${t} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/MP>)
    target_compile_options(${t} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/arch:AVX2>)
endforeach()