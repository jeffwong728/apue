set(the_description "Machine Vision Package")

IF (WIN32 AND MSVC)
  add_compile_options("/utf-8")
ENDIF()

cmake_policy(PUSH)
cmake_policy(SET CMP0074 NEW)

IF(NOT TARGET TBB::tbb)
  find_package(TBB CONFIG REQUIRED tbb)
ENDIF()

IF(NOT TARGET TBB::tbbmalloc)
  find_package(TBB CONFIG REQUIRED tbbmalloc)
ENDIF()

IF(NOT TARGET Boost::filesystem)
  find_package(Boost REQUIRED COMPONENTS filesystem)
ENDIF()

IF(NOT TARGET Boost::serialization)
  find_package(Boost REQUIRED COMPONENTS serialization)
ENDIF()

IF(NOT TARGET Boost::iostreams)
  find_package(Boost REQUIRED COMPONENTS iostreams)
ENDIF()

IF (MINGW)
  set(VCPKG_TARGET_TRIPLET "$ENV{VCPKG_DEFAULT_TRIPLET}")
  set(vectorclass_DIR "$ENV{VCPKG_ROOT_DIR}/installed/$ENV{VCPKG_DEFAULT_TRIPLET}/share/vectorclass")
  set(mimalloc_DIR "$ENV{VCPKG_ROOT_DIR}/installed/$ENV{VCPKG_DEFAULT_TRIPLET}/share/mimalloc")
ENDIF()

IF (MSVC)
  list(APPEND CMAKE_MODULE_PATH "$ENV{SPAM_ROOT_DIR}/cmake")
  set(2Geom_DIR "$ENV{SPAM_ROOT_DIR}/install/lib2geom/lib/cmake/2Geom")
  set(mimalloc_DIR "$ENV{SPAM_ROOT_DIR}/install/mimalloc/lib/mimalloc-1.6/cmake")
  find_package(2Geom REQUIRED)
  find_package(unofficial-cairo CONFIG REQUIRED)
  find_package(CAIROMM REQUIRED)
  find_package(unofficial-glib CONFIG REQUIRED)
  find_package(GLIBMM REQUIRED)
  find_package(sigc++-3 CONFIG REQUIRED)
  find_package(GSL REQUIRED)
  find_package(double-conversion CONFIG REQUIRED)
  find_package(vectorclass CONFIG REQUIRED)
  find_package(mimalloc 1.6 CONFIG REQUIRED)
  find_package(hdf5 CONFIG REQUIRED)
ELSE()
  list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
  set(2Geom_DIR "$ENV{SPAM_ROOT_DIR}/install/lib2geom/lib/cmake/2Geom")
  set(HDF5_USE_STATIC_LIBRARIES OFF)
  find_package(2Geom REQUIRED)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(GTK3 gtk+-3.0 IMPORTED_TARGET)
  pkg_check_modules(GLIB glib-2.0 IMPORTED_TARGET)
  pkg_check_modules(GSL gsl IMPORTED_TARGET)
  pkg_check_modules(CAIRO cairo IMPORTED_TARGET)
  pkg_check_modules(CAIROMM cairomm-1.0 IMPORTED_TARGET)
  pkg_check_modules(GLIBMM glibmm-2.4 IMPORTED_TARGET)
  pkg_check_modules(SIGCPP sigc++-2.0 IMPORTED_TARGET)
  find_package(HDF5 COMPONENTS C CXX HL)
  find_package(double-conversion CONFIG REQUIRED)
  find_package(vectorclass CONFIG REQUIRED)
  find_package(mimalloc 1.6 CONFIG REQUIRED)
ENDIF()

list(POP_BACK CMAKE_MODULE_PATH)
cmake_policy(POP)

ocv_define_module(mvlab opencv_core opencv_imgcodecs opencv_imgproc opencv_calib3d WRAP python)
ocv_target_link_libraries(${the_module} LINK_PRIVATE TBB::tbb TBB::tbbmalloc Boost::filesystem Boost::serialization Boost::iostreams mimalloc-static)
IF (WIN32 AND MSVC)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE unofficial::cairo::cairo unofficial::glib::glib GLIBMM::glibmm CAIROMM::CAIROMM)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE 2Geom::2geom sigc-3.0 GSL::gsl double-conversion::double-conversion vectorclass::vectorclass)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE hdf5::hdf5-shared hdf5::hdf5_hl-shared hdf5::hdf5_cpp-shared hdf5::hdf5_hl_cpp-shared)
ELSE()
  ocv_target_include_directories(${the_module} PRIVATE "${CMAKE_CURRENT_LIST_DIR}/src")
  ocv_target_link_libraries(${the_module} LINK_PRIVATE 2Geom::2geom)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::CAIRO)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::CAIROMM)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::GLIB)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::GLIBMM)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::GTK3)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::GSL)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE PkgConfig::SIGCPP)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE vectorclass::vectorclass)
  ocv_target_link_libraries(${the_module} LINK_PRIVATE double-conversion::double-conversion)
  ocv_target_include_directories(${the_module} PRIVATE SYSTEM "${HDF5_INCLUDE_DIRS}")
  ocv_target_link_libraries(${the_module} LINK_PRIVATE "${HDF5_LIBRARIES}" "${HDF5_HL_LIBRARIES}")
  target_compile_definitions(${the_module} PRIVATE "${HDF5_DEFINITIONS}")
ENDIF()

target_compile_definitions(${the_module} PRIVATE NOMINMAX __AVX2__ VCL_NAMESPACE=vcl)
target_compile_options(${the_module} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/arch:AVX2>)
target_compile_options(${the_module} PRIVATE $<$<CXX_COMPILER_ID:Clang>:-mavx2>)
target_compile_options(${the_module} PRIVATE $<$<CXX_COMPILER_ID:GNU>:-mavx2 -mfma>)
target_compile_options(${the_module} PRIVATE $<$<CXX_COMPILER_ID:GNU>:-Wno-class-memaccess -Wno-unused-parameter -Wno-reorder -Wno-missing-declarations>)
target_compile_options(${the_module} PRIVATE $<$<AND:$<CXX_COMPILER_ID:GNU>,$<CONFIG:Debug>>:-Wa,-mbig-obj -Og>)
