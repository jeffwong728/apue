add_compile_options("/utf-8")
#add_executable(test WIN32 wrapsizer.cpp ustring.cpp)
add_executable(SampleFilterFuzz main.cpp)
add_executable(sample WIN32 thumbnail/thumbnaildlg.h thumbnail/thumbnailctrl.h thumbnail/thumbnaildlg.cpp thumbnail/sample.cpp thumbnail/thumbnailctrl.cpp)

add_executable(Camera examples/SimpleWithFunctors.cpp)
add_library(hellopy SHARED hellopy.cpp)

set(libs)
list(APPEND libs ZLIB::ZLIB)
list(APPEND libs BZip2::BZip2)
list(APPEND libs PNG::PNG)
list(APPEND libs Freetype::Freetype)
list(APPEND libs Pixman::Pixman)
list(APPEND libs "sigc-3.0")
list(APPEND libs EXPAT::EXPAT)
list(APPEND libs PCRE::pcre)
list(APPEND libs PCRE::pcre16)
list(APPEND libs PCRE::pcre32)
list(APPEND libs LIBLZMA::LIBLZMA)
list(APPEND libs JPEG::jpeg)
list(APPEND libs JPEG::turbo)
list(APPEND libs GLUT::GLUT)
list(APPEND libs TIFF::TIFF)
list(APPEND libs Iconv::Iconv)
list(APPEND libs Iconv::charset)
list(APPEND libs FFI::FFI)
list(APPEND libs Intl::Intl)
list(APPEND libs GLIB::glib)
list(APPEND libs GLIB::gobject)
list(APPEND libs GLIBMM::glibmm)
list(APPEND libs GLIBMM::giomm)
list(APPEND libs FontConfig::FontConfig)
list(APPEND libs CAIRO::cairo)
list(APPEND libs CAIRO::gobject)
list(APPEND libs SKIA::skia)
list(APPEND libs SKIA::pathkit)
list(APPEND libs CAIROMM::CAIROMM)
list(APPEND libs TBB::tbb)
list(APPEND libs pstl::ParallelSTL)
list(APPEND libs GSL::gsl)
list(APPEND libs GSL::gslcblas)
list(APPEND libs szip-static)
list(APPEND libs hdf5::hdf5_cpp-static)
list(APPEND libs hdf5::hdf5_hl_cpp-static)
list(APPEND libs ICU::i18n)
list(APPEND libs ICU::io)
list(APPEND libs ICU::uc)
list(APPEND libs Boost::locale)
list(APPEND libs Boost::system)
list(APPEND libs Boost::thread)
list(APPEND libs Boost::chrono)
list(APPEND libs OpenCL::OpenCL)
list(APPEND libs opencv_core)
list(APPEND libs opencv_imgcodecs)
list(APPEND libs WXSVG::WXSVG)

target_link_libraries(sample PRIVATE ${libs})
target_link_libraries(SampleFilterFuzz PRIVATE ${libs})
target_link_libraries(hellopy PRIVATE Python2::Python Boost::python27 Boost::chrono OpenCL::OpenCL)
target_include_directories(Camera PRIVATE ${Boost_INCLUDE_DIRS})

target_include_directories(sample PRIVATE ${wxWidgets_INCLUDE_DIRS})
target_compile_definitions(sample PRIVATE ${wxWidgets_DEFINITIONS})
target_compile_definitions(sample PRIVATE $<$<CONFIG:Debug>:${wxWidgets_DEFINITIONS_DEBUG}>)
target_compile_options(sample PRIVATE ${wxWidgets_CXX_FLAGS})
target_link_libraries(sample PRIVATE ${wxWidgets_LIBRARIES})

if(MSVC)
  target_compile_definitions(sample PUBLIC _USE_MATH_DEFINES _SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING _SCL_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS __NO_VC_CRTDBG__)
  target_compile_definitions(hellopy PRIVATE BOOST_PYTHON_STATIC_LIB BOOST_PYTHON_STATIC_MODULE PY_MAJOR_VERSION=2 PY_MINOR_VERSION=7)
endif()

set_target_properties(hellopy PROPERTIES SUFFIX ".pyd")

get_filename_component(GLIB_RUNTIME_DIR "${GLIB_INCLUDE_DIR}" DIRECTORY)
set(CMAKE_MSVCIDE_RUN_PATH "${GLIB_RUNTIME_DIR}/bin")
get_filename_component(TBB_RUNTIME_DIR "${TBB_DIR}" DIRECTORY)

set_target_properties(sample PROPERTIES DEBUG_POSTFIX "_debug")
set_target_properties(sample PROPERTIES RELWITHDEBINFO_POSTFIX "_relwithdebinfo")
set_target_properties(sample PROPERTIES MINSIZEREL_POSTFIX "_minsizerel")

include(GNUInstallDirs)
install(TARGETS sample DESTINATION ${CMAKE_INSTALL_BINDIR})
install(TARGETS hellopy DESTINATION ${CMAKE_INSTALL_BINDIR})
if(MSVC)
    install(FILES $<TARGET_PDB_FILE:sample> DESTINATION "${CMAKE_INSTALL_BINDIR}" OPTIONAL)
    install(FILES $<TARGET_PDB_FILE:hellopy> DESTINATION "${CMAKE_INSTALL_BINDIR}" OPTIONAL)
endif()

include(GoogleTest)
add_executable(test_executable sample1.cc sample1_unittest.cc)
target_link_libraries(test_executable PRIVATE GTest::GTest GTest::Main)
gtest_add_tests(TARGET test_executable TEST_SUFFIX .noArgs TEST_LIST noArgsTests)

add_custom_command(TARGET sample POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:GLIB::glib> $<TARGET_FILE_DIR:sample>)
add_custom_command(TARGET sample POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:GLIB::gobject> $<TARGET_FILE_DIR:sample>)
add_custom_command(TARGET sample POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:TBB::tbb> $<TARGET_FILE_DIR:sample>)
add_custom_command(TARGET sample POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:OpenCL::OpenCL> $<TARGET_FILE_DIR:sample>)
add_custom_command(TARGET sample POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:opencv_core> $<TARGET_FILE_DIR:sample>)