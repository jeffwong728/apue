cmake_minimum_required(VERSION 3.16)

set(CMAKE_SYSTEM_VERSION 10.0.19041.0)
project(TestQT LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(QT_USE_QTMAIN TRUE)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(MSVC)
    set(GUI_TYPE WIN32)
    add_compile_options(/MP)
    add_compile_definitions($<$<CONFIG:Debug>:_DEBUG>)
    add_definitions(-DUNICODE -D_UNICODE -U_MBCS)
    add_compile_options("/utf-8")
    add_compile_options(/Oy-)
    add_compile_options($<$<CONFIG:Release>:/Zi>)
    add_link_options($<$<CONFIG:Release>:/DEBUG>)
elseif(CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(-std=c++17)
endif(MSVC)

set(PYBIND11_NOPYTHON ON)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)
find_package(VCPKG REQUIRED COMPONENTS crashrpt crashrptprobe)
find_package(Python3 REQUIRED COMPONENTS Development Interpreter)
find_package(pybind11 CONFIG REQUIRED)
find_package(OpenCV CONFIG REQUIRED)
find_package(Qt6 COMPONENTS Core Core5Compat Gui Widgets Charts REQUIRED)
find_package(Qt6 COMPONENTS UiTools UiPlugin OpenGL Sql SerialPort REQUIRED)
find_package(Qt6 COMPONENTS OpenGLWidgets LinguistTools Network REQUIRED)
find_package(Qt6 REQUIRED COMPONENTS Concurrent)

message(STATUS "Found the following Python 3 libraries:")
message(STATUS "    Python 3 Version: ${Python3_VERSION}")
message(STATUS "    Python 3 include directories: ${Python3_INCLUDE_DIRS}")
message(STATUS "    Python 3 libraries: ${Python3_LIBRARIES}")
message(STATUS "    Python 3 debug library: ${Python3_LIBRARY_DEBUG}")
message(STATUS "    Python 3 release library: ${Python3_LIBRARY_RELEASE}")
message(STATUS "    Python 3 compile options: ${Python3_COMPILE_OPTIONS}")
message(STATUS "    Python 3 link options: ${Python3_LINK_OPTIONS}")
message(STATUS "    Python 3 library directories: ${Python3_LIBRARY_DIRS}")
message(STATUS "    Python 3 runtime library directories: ${Python3_RUNTIME_LIBRARY_DIRS}")

get_target_property(Python3_LOCATION Python3::Python LOCATION)
get_target_property(Python3_LOCATION_DEBUG Python3::Python LOCATION_DEBUG)
get_target_property(Python3_LOCATION_RELEASE Python3::Python LOCATION_RELEASE)
message(STATUS "    Python 3 LOCATION: ${Python3_LOCATION}")
message(STATUS "    Python 3 LOCATION_DEBUG: ${Python3_LOCATION_DEBUG}")
message(STATUS "    Python 3 LOCATION_RELEASE: ${Python3_LOCATION_RELEASE}")
target_link_libraries(TestQT PRIVATE pybind11::embed)
target_link_libraries(TestQT PUBLIC ${Python3_LIBRARY_RELEASE})
target_include_directories(TestQT PRIVATE ${Python3_INCLUDE_DIRS})
target_include_directories(TestQT PRIVATE ${CMAKE_CURRENT_LIST_DIR})
target_link_options(TestQT PRIVATE ${Python3_LINK_OPTIONS})

source_group(mocs REGULAR_EXPRESSION "mocs_.*[.]cpp")
source_group(autouics REGULAR_EXPRESSION "autouic_.*[.]stamp|ui_.*[.]h")
source_group(resources REGULAR_EXPRESSION ".*[.][q]?rc")

function(assign_source_group)
    foreach(_source IN ITEMS ${ARGN})
        if (IS_ABSOLUTE "${_source}")
            file(RELATIVE_PATH _source_rel "${CMAKE_CURRENT_SOURCE_DIR}" "${_source}")
        else()
            set(_source_rel "${_source}")
        endif()
        get_filename_component(_source_path "${_source_rel}" PATH)
        string(REPLACE "/" "\\" _source_path_msvc "${_source_path}")
        source_group("${_source_path_msvc}" FILES "${_source}")
    endforeach()
endfunction(assign_source_group)

add_subdirectory(laserxutil)
add_subdirectory(laserxdevices)
add_subdirectory(laserxwidgets)
add_subdirectory(designer)
add_subdirectory(startsplash)
add_subdirectory(src)
add_subdirectory(laserxvision)
add_subdirectory(plugins)
add_subdirectory(lib2geom)
add_subdirectory(tools)
