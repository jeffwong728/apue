set(VCPKG_DIR "$ENV{VCPKG_ROOT_DIR}/installed/x64-windows")
set(VCPKG_INCLUDE_DIR "${VCPKG_DIR}/include")

set(name_libs)
set(d_libs)
set(r_libs)
set(d_bins)
set(r_bins)

set(name_static_libs)
set(d_static_libs)
set(r_static_libs)

list(APPEND name_static_libs cairomm)
list(APPEND d_static_libs cairomm-1.0)
list(APPEND r_static_libs cairomm-1.0)

list(APPEND name_libs glib)
list(APPEND d_libs glib-2.0)
list(APPEND r_libs glib-2.0)
list(APPEND d_bins glib-2.dll)
list(APPEND r_bins glib-2.dll)

list(APPEND name_libs gobject)
list(APPEND d_libs gobject-2.0)
list(APPEND r_libs gobject-2.0)
list(APPEND d_bins gobject-2.dll)
list(APPEND r_bins gobject-2.dll)

list(APPEND name_libs gio)
list(APPEND d_libs gio-2.0)
list(APPEND r_libs gio-2.0)
list(APPEND d_bins gio-2.dll)
list(APPEND r_bins gio-2.dll)

list(APPEND name_libs gthread)
list(APPEND d_libs gthread-2.0)
list(APPEND r_libs gthread-2.0)
list(APPEND d_bins gthread-2.dll)
list(APPEND r_bins gthread-2.dll)

list(APPEND name_libs gmodule)
list(APPEND d_libs gmodule-2.0)
list(APPEND r_libs gmodule-2.0)
list(APPEND d_bins gmodule-2.dll)
list(APPEND r_bins gmodule-2.dll)

list(APPEND name_libs gtk3)
list(APPEND d_libs gtk-3.0)
list(APPEND r_libs gtk-3.0)
list(APPEND d_bins gtk-3.dll)
list(APPEND r_bins gtk-3.dll)

list(APPEND name_libs gdk3)
list(APPEND d_libs gdk-3.0)
list(APPEND r_libs gdk-3.0)
list(APPEND d_bins gdk-3.dll)
list(APPEND r_bins gdk-3.dll)

list(APPEND name_libs cairo)
list(APPEND d_libs cairod)
list(APPEND r_libs cairo)
list(APPEND d_bins cairod.dll)
list(APPEND r_bins cairo.dll)

list(APPEND name_libs pango)
list(APPEND d_libs pango-1.0)
list(APPEND r_libs pango-1.0)
list(APPEND d_bins pango-1.dll)
list(APPEND r_bins pango-1.dll)

list(APPEND name_libs pangocairo)
list(APPEND d_libs pangocairo-1.0)
list(APPEND r_libs pangocairo-1.0)
list(APPEND d_bins pangocairo-1.dll)
list(APPEND r_bins pangocairo-1.dll)

list(APPEND name_libs gdk_pixbuf)
list(APPEND d_libs gdk_pixbuf-2.0)
list(APPEND r_libs gdk_pixbuf-2.0)
list(APPEND d_bins gdk_pixbuf-2.dll)
list(APPEND r_bins gdk_pixbuf-2.dll)

list(APPEND name_libs glibmm)
list(APPEND d_libs glibmm)
list(APPEND r_libs glibmm)
list(APPEND d_bins glibmm.dll)
list(APPEND r_bins glibmm.dll)

list(APPEND name_libs exif)
list(APPEND d_libs libexif)
list(APPEND r_libs libexif)
list(APPEND d_bins libexif.dll)
list(APPEND r_bins libexif.dll)

include(SpamCommon)
include(SelectLibraryConfigurations)
include(FindPackageHandleStandardArgs)
foreach(name_lib d_lib r_lib d_bin r_bin IN ZIP_LISTS name_libs d_libs r_libs d_bins r_bins)
    find_library(VCPKG_${name_lib}_LIBRARY_DEBUG NAMES ${d_lib} PATHS "${VCPKG_DIR}/debug/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
    find_library(VCPKG_${name_lib}_LIBRARY_RELEASE NAMES ${r_lib} PATHS "${VCPKG_DIR}/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
    find_program(VCPKG_${name_lib}_RUNTIME_LIBRARY_DEBUG ${d_bin} PATHS "${VCPKG_DIR}/debug/bin" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
    find_program(VCPKG_${name_lib}_RUNTIME_LIBRARY_RELEASE ${r_bin} PATHS "${VCPKG_DIR}/bin" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)

    select_library_configurations(VCPKG_${name_lib})
    select_library_configurations(VCPKG_${name_lib}_RUNTIME)
    find_package_handle_standard_args(VCPKG::${name_lib} REQUIRED_VARS VCPKG_${name_lib}_LIBRARY VCPKG_${name_lib}_RUNTIME_LIBRARY HANDLE_COMPONENTS NAME_MISMATCHED)

    if(VCPKG::${name_lib}_FOUND)
      set(VCPKG_INCLUDE_DIRS "${VCPKG_INCLUDE_DIR}")
      spam_export_shared_pack_component(VCPKG ${name_lib})
    endif()
endforeach()

foreach(name_static_lib d_static_lib r_static_lib IN ZIP_LISTS name_static_libs d_static_libs r_static_libs)
    find_library(VCPKG_${name_static_lib}_LIBRARY_DEBUG NAMES ${d_static_lib} PATHS "${VCPKG_DIR}/debug/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)
    find_library(VCPKG_${name_static_lib}_LIBRARY_RELEASE NAMES ${r_static_lib} PATHS "${VCPKG_DIR}/lib" NO_DEFAULT_PATH NO_PACKAGE_ROOT_PATH NO_CMAKE_PATH)

    select_library_configurations(VCPKG_${name_static_lib})
    find_package_handle_standard_args(VCPKG::${name_static_lib} REQUIRED_VARS VCPKG_${name_static_lib}_LIBRARY HANDLE_COMPONENTS NAME_MISMATCHED)

    if(VCPKG::${name_static_lib}_FOUND)
      set(VCPKG_INCLUDE_DIRS "${VCPKG_INCLUDE_DIR}")
      spam_export_pack_component(VCPKG ${name_static_lib})
    endif()
endforeach()
