cmake_minimum_required(VERSION 3.12.1)
project(apue)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    get_filename_component(absInstallPath "install/${CMAKE_PROJECT_NAME}" ABSOLUTE BASE_DIR "${CMAKE_CURRENT_LIST_DIR}")
    set(CMAKE_INSTALL_PREFIX "${absInstallPath}" CACHE PATH "Install path prefix" FORCE)
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

set(ZLIB_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/zlib")
set(BZip2_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/bzip2")
set(PNG_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/libpng")
set(Freetype_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/freetype")
set(Pixman_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/pixman")
set(sigc++-3_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/sigc++")
set(EXPAT_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/expat")
set(PCRE_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/PCRE")
set(LIBLZMA_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/liblzma")
set(JPEG_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/libjpeg-turbo")
set(FREEGLUT_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/freeglut")
set(TIFF_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/tiff")
set(Iconv_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/libiconv")
set(FFI_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/libffi")
set(Intl_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/gettext")
set(GLIB_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/glib")
set(GLIBMM_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/glibmm")
set(FontConfig_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/fontconfig")
set(CAIRO_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/cairo")
set(SKIA_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/skia")
set(CAIROMM_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/cairomm")
set(TBB_DIR "${CMAKE_CURRENT_LIST_DIR}/install/tbb/cmake")
set(ParallelSTL_DIR "${CMAKE_CURRENT_LIST_DIR}/install/pstl/cmake")
set(GSL_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/install/gsl")
set(SZIP_DIR "${CMAKE_CURRENT_LIST_DIR}/install/szip/cmake/szip")
set(HDF5_DIR "${CMAKE_CURRENT_LIST_DIR}/install/hdf5/cmake/hdf5")
set(ICU_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/icu")
set(BOOST_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/boost")
set(wxWidgets_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/install/wxWidgets")
set(OpenCL_ROOT "${CMAKE_CURRENT_LIST_DIR}/install/OpenCL")
set(OpenCV_DIR "${CMAKE_CURRENT_LIST_DIR}/install/OpenCV")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
if(MSVC)
    add_compile_definitions($<$<CONFIG:Debug>:_DEBUG>)
    add_definitions(-DUNICODE -D_UNICODE -U_MBCS)
endif()
set(CMAKE_CXX_STANDARD 17)

include(${CMAKE_CURRENT_LIST_DIR}/cmake/ConfigChecks.cmake)

#set(ICU_DEBUG ON)
set(Boost_USE_STATIC_LIBS ON)
find_package(ZLIB REQUIRED)
find_package(BZip2 REQUIRED)
find_package(PNG REQUIRED)
find_package(Freetype REQUIRED)
find_package(Pixman REQUIRED)
find_package(sigc++-3 CONFIG REQUIRED)
find_package(EXPAT REQUIRED)
find_package(PCRE REQUIRED)
find_package(LibLZMA REQUIRED)
find_package(JPEGTurbo REQUIRED)
find_package(FreeGLUT REQUIRED)
find_package(TIFF REQUIRED)
find_package(Iconv REQUIRED)
find_package(FFI REQUIRED)
find_package(Intl REQUIRED)
find_package(GLIB REQUIRED)
find_package(GLIBMM REQUIRED)
find_package(FontConfig REQUIRED)
find_package(CAIRO REQUIRED)
find_package(CAIROMM REQUIRED)
find_package(SKIA REQUIRED)
find_package(TBB REQUIRED tbb)
find_package(ParallelSTL REQUIRED)
find_package(GSL REQUIRED)
find_package(SZIP REQUIRED)
find_package(HDF5 CONFIG REQUIRED)
find_package(ICU REQUIRED i18n data io uc)
find_package(Boost REQUIRED locale system thread python27 chrono filesystem)
find_package(Python2 REQUIRED Development)
find_package(wxWidgets REQUIRED COMPONENTS base core adv aui html media xrc dbgrid gl qa richtext stc ribbon propgrid webview)
find_package(OpenCL REQUIRED)
find_package(OpenCV REQUIRED core imgcodecs)

add_subdirectory(test)
add_subdirectory(spam)